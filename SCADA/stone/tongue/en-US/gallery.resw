<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="Remote" xml:space="preserve">
    <value>Control Remotely</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="Starting" xml:space="preserve">
    <value>Turning On</value>
  </data>
  <data name="Stopped" xml:space="preserve">
    <value>Not Running</value>
  </data>
  <data name="Stopping" xml:space="preserve">
    <value>Turning Off</value>
  </data>
  <data name="Unstartable" xml:space="preserve">
    <value>Failed to Turn On</value>
  </data>
  <data name="Unstoppable" xml:space="preserve">
    <value>Failed to Turn Off</value>
  </data>
  <data name="hydraulic_pump" xml:space="preserve">
    <value>Hydraulic Pump</value>
  </data>
  <data name="gate_valve" xml:space="preserve">
    <value>Gate Valve</value>
  </data>
  <data name="Closed" xml:space="preserve">
    <value>Fully Closed</value>
  </data>
  <data name="Closing" xml:space="preserve">
    <value>Turning Off</value>
  </data>
  <data name="CloseReady" xml:space="preserve">
    <value>Ready to Close</value>
  </data>
  <data name="OpenReady" xml:space="preserve">
    <value>Ready to Open</value>
  </data>
  <data name="VirtualClose" xml:space="preserve">
    <value>Virtual Close</value>
  </data>
  <data name="VirtualOpen" xml:space="preserve">
    <value>Virtual Open</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Fully Open</value>
  </data>
  <data name="Opening" xml:space="preserve">
    <value>Turning On</value>
  </data>
  <data name="Unclosable" xml:space="preserve">
    <value>Failed to Close</value>
  </data>
  <data name="Unopenable" xml:space="preserve">
    <value>Failed to Open</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="upperdoor" xml:space="preserve">
    <value>Upper Hopper Door</value>
  </data>
  <data name="hopperdoor" xml:space="preserve">
    <value>Hopper Door</value>
  </data>
  <data name="winch_1" xml:space="preserve">
    <value>Winch</value>
  </data>
  <data name="motor_valve" xml:space="preserve">
    <value>Motor Valve</value>
  </data>
  <data name="hopper_pump" xml:space="preserve">
    <value>Hopper Pump</value>
  </data>
  <data name="water_pump" xml:space="preserve">
    <value>Water Pump</value>
  </data>
  <data name="FastWindingOut" xml:space="preserve">
    <value>High-Speed Winding Out</value>
  </data>
  <data name="FastWindingUp" xml:space="preserve">
    <value>High-Speed Winding Up</value>
  </data>
  <data name="WindingOut" xml:space="preserve">
    <value>Winding Out</value>
  </data>
  <data name="WindingUp" xml:space="preserve">
    <value>Winding Up</value>
  </data>
  <data name="Unlettable" xml:space="preserve">
    <value>Failed to Wind Out</value>
  </data>
  <data name="Unpullable" xml:space="preserve">
    <value>Failed to Wind Up</value>
  </data>
  <data name="FastWindOutReady" xml:space="preserve">
    <value>Ready to High-Speed Wind Out</value>
  </data>
  <data name="FastWindUpReady" xml:space="preserve">
    <value>Ready to High-Speed Wind Up</value>
  </data>
  <data name="CableLowerLimited" xml:space="preserve">
    <value>Cable Lower Limited</value>
  </data>
  <data name="SoftBottomLimited" xml:space="preserve">
    <value>Soft Bottom Limited</value>
  </data>
  <data name="SoftTopLimited" xml:space="preserve">
    <value>Soft Top Limited</value>
  </data>
  <data name="CableTopLimited" xml:space="preserve">
    <value>Cable Top Limited</value>
  </data>
  <data name="WindOutReady" xml:space="preserve">
    <value>Ready to Wind Out</value>
  </data>
  <data name="WindUpReady" xml:space="preserve">
    <value>Ready to Wind Up</value>
  </data>
  <data name="winch_2" xml:space="preserve">
    <value>Winch</value>
  </data>
  <data name="Slack" xml:space="preserve">
    <value>Cable Slack</value>
  </data>
  <data name="SaddleLimited" xml:space="preserve">
    <value>Saddle Limited</value>
  </data>
  <data name="SuctionLimited" xml:space="preserve">
    <value>Suction Limited</value>
  </data>
  <data name="Broken" xml:space="preserve">
    <value>Broken</value>
  </data>
  <data name="StartReady" xml:space="preserve">
    <value>Ready to Start</value>
  </data>
  <data name="StopReady" xml:space="preserve">
    <value>Ready to Stop</value>
  </data>
  <data name="Alert" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="Maintenance" xml:space="preserve">
    <value>Maintenance</value>
  </data>
  <data name="SuctionSlack" xml:space="preserve">
    <value>Suction + Slack</value>
  </data>
  <data name="SaddleSlack" xml:space="preserve">
    <value>Saddle  + Slack</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="FastWindReady" xml:space="preserve">
    <value>Ready to High-Speed Wind Up or Out</value>
  </data>
  <data name="WindReady" xml:space="preserve">
    <value>Ready to Wind Up or Out</value>
  </data>
  <data name="heater" xml:space="preserve">
    <value>Heater</value>
  </data>
  <data name="Auto" xml:space="preserve">
    <value>Auto</value>
  </data>
  <data name="Limited" xml:space="preserve">
    <value>Power Limited</value>
  </data>
  <data name="BottomLimited" xml:space="preserve">
    <value>Cable + Soft Bottom Limited</value>
  </data>
  <data name="CableBottomLimited" xml:space="preserve">
    <value>Cable Bottom Limited</value>
  </data>
  <data name="TopLimited" xml:space="preserve">
    <value>Cable + Soft Top Limited</value>
  </data>
  <data name="VirtualBroken" xml:space="preserve">
    <value>Virtual Broken</value>
  </data>
</root>